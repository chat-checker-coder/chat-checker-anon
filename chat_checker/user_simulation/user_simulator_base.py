from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List, Optional, Tuple, Any

from litellm.types.utils import ModelResponse
from openai.types.chat import (
    ChatCompletionMessageParam,
)

from chat_checker.models.chatbot import ChatbotInfo
from chat_checker.models.dialogue import DialogueTurn


@dataclass
class UserSimulatorResponse:
    response_message: str
    is_end: bool
    prompt_messages: Optional[List[ChatCompletionMessageParam]] = None
    model_response: Optional[ModelResponse] = None
    summaries: Optional[List[str]] = None


class UserSimulatorBase(ABC):
    def __init__(
        self,
        model: str,
        temperature: Optional[float] = None,
        seed: Optional[int] = None,
    ):
        """Initialize the user simulator.

        Args:
            model (str): The model used for the user simulator.
            temperature (float): The temperature for the model. Default if None.
            seed (int): The seed for the LLM generations. Default if None.
        """
        self.model = model
        self.temperature = temperature
        self.seed = seed

    @abstractmethod
    def set_up_session(self, **kwargs: Any) -> None:
        """Set up a new session for the user simulator.

        Args:
            **kwargs: Additional arguments to set up the session.
        """
        pass

    @abstractmethod
    def generate_response(
        self, chat_history: List[DialogueTurn]
    ) -> UserSimulatorResponse:
        """Generate a response to the given chat history.

        Args:
            chat_history (List[DialogueTurn]): History of the conversation with the chatbot so far.

        Returns:
            UserSimulatorResponse: The response generated by the user simulator.
        """
        pass

    @abstractmethod
    def tear_down_session(self) -> None:
        """Tear down the current session."""
        pass

    @staticmethod
    def handle_model_response_end(response_message: str) -> Tuple[str, bool]:
        """Check if the response message indicates the end of the conversation.

        Args:
            response_message (str): The response message.

        Returns:
            Tuple[str, bool]: The cleaned response message and a boolean indicating if the conversation is over.
        """
        end_conversation_string = "END_CONVERSATION"
        if end_conversation_string in response_message:
            # check if there is content before the "END_CONVERSATION" string
            end_index = response_message.find("END_CONVERSATION")
            if end_index > 0:
                cleaned_message = (
                    response_message[:end_index].strip().strip('"').strip("'")
                )
            else:
                cleaned_message = ""
            return cleaned_message, True
        elif response_message.strip() == "":
            return response_message, True
        return response_message, False


class OurUserSimulatorBase(UserSimulatorBase):
    def __init__(
        self,
        chatbot_info: ChatbotInfo,
        model: str,
        temperature: Optional[float] = None,
        seed: Optional[int] = None,
        typical_user_turn_length: Optional[str] = None,
        max_user_turn_length: Optional[str] = None,
    ):
        """Initialize the user simulator.

        Args:
            chatbot_info (ChatbotInfo): Information about the chatbot.
            model (str): The model used for the user simulator.
            temperature (float): The temperature for the model. Default if None.
            seed (int): The seed for the LLM generations. Default if None.
            typical_user_turn_length (str): The typical length of the response. Not specified if None.
            max_user_turn_length (str): The maximum length of the response (e.g. "10 words" or "200 characters"). No limit if None.
        """
        super().__init__(model=model, temperature=temperature, seed=seed)

        self.chatbot_info = chatbot_info
        self.typical_user_turn_length = typical_user_turn_length
        self.max_user_turn_length = max_user_turn_length

    def set_up_session(self, **kwargs: Any) -> None:
        pass

    def tear_down_session(self) -> None:
        pass
